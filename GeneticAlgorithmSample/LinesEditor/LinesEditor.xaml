<Window x:Class="WPFSamples.Samples.LinesEditor.LinesEditor"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/shared"                    
                    Title="LinesEditor" Width="500" Height="600">

    <DockPanel>
        <Expander DataContext="{Binding SelectedItem, ElementName=lst}" DockPanel.Dock="Top"
                  Header="{Binding Name}" IsExpanded="True"
                  BorderBrush="LightGray" BorderThickness="0,0,0,1" Margin="0,5,0,0">
            <Expander.HeaderTemplate>
                <DataTemplate>
                    <DockPanel Height="30">
                        <!--<Button Content="Add Line" Click="AddLine_Click"
                                VerticalAlignment="Center" Margin="5,0,2,0" DockPanel.Dock="Right"/>
                        <Button Content="Remove Line" Click="RemoveLine_Click"
                                VerticalAlignment="Center" Margin="5,0,2,0" DockPanel.Dock="Right"/>

                        <Button Content="Bring to Top" Click="BringToTop_Click"
                                VerticalAlignment="Center" Margin="5,0,2,0" DockPanel.Dock="Right"/>-->

                        <TextBlock Text='Click on a Line to edit its properties' VerticalAlignment="Center" 
                             />
                    </DockPanel>
                </DataTemplate>
            </Expander.HeaderTemplate>
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedItem, ElementName=lst}" Value="{x:Null}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Setter Property="Opacity" Value=".8"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="110"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Label Grid.Row="0" Grid.Column="0" Content="Name:"/>
                <Label Grid.Row="1" Grid.Column="0" Content="Thickness:" />

                <Label Grid.Row="0"  Grid.Column="2" Content="X1:"/>
                <Label Grid.Row="1"  Grid.Column="2"  Content="X2:"/>

                <Label Grid.Row="0" Grid.Column="4" Content="Y1:"/>
                <Label Grid.Row="1" Grid.Column="4"  Content="Y2:"/>

                <Label Grid.Row="2" Grid.Column="2" Content="Movement Speed:"/>
                <Label Grid.Row="2" Grid.Column="4" Content="Opacity:"/>

                <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"/>
                <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Thickness,UpdateSourceTrigger=PropertyChanged}"/>

                <TextBox Grid.Column="3" Grid.Row="0" Text="{Binding X1, UpdateSourceTrigger=PropertyChanged}" MouseWheel="TextBox_MouseWheel" />
                <TextBox Grid.Column="3" Grid.Row="1" Text="{Binding X2, UpdateSourceTrigger=PropertyChanged}" MouseWheel="TextBox_MouseWheel"/>

                <TextBox Grid.Column="5" Grid.Row="0" Text="{Binding Y1, UpdateSourceTrigger=PropertyChanged}" MouseWheel="TextBox_MouseWheel"/>
                <TextBox Grid.Column="5" Grid.Row="1" Text="{Binding Y2, UpdateSourceTrigger=PropertyChanged}" MouseWheel="TextBox_MouseWheel"/>

                <CheckBox Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2" Margin="2" VerticalAlignment="Center"
                          Content="Move the Line Randomly" 
                          IsChecked="{Binding Animate}"/>

                <ComboBox ItemsSource="{Binding AnimationSpeeds}" SelectedItem="{Binding AnimationSpeed}"
                          Grid.Column="3" Grid.Row="2" Margin="2"
                          IsEnabled="{Binding Animate}"/>

                <Slider Minimum="0" Maximum="1" LargeChange=".5" SmallChange=".1" 
                        Grid.Column="5" Grid.Row="2"
                        Value="{Binding Opacity,Mode=TwoWay}"/>

            </Grid>
        </Expander>

        <Expander Header="Comments" DockPanel.Dock="Top" Margin="0,5,0,10"
                  BorderBrush="LightGray" BorderThickness="0,0,0,1">
            <TextBlock TextAlignment="Center"  TextWrapping="Wrap">
                Click on any of the Lines to select it.
                <LineBreak/>
                Use the mouse wheel while hovering the <Italic>X1, X2, Y1, and Y2</Italic> <Bold>TextBoxes</Bold> to change their values.
                <LineBreak/>
                <LineBreak/>
                The Element Below this Text is a <Bold>ListBox</Bold> inside a <Bold>Viewbox</Bold>
                <LineBreak/>
                The <Bold>Viewbox</Bold> stretches its contents to the available space, and the <Bold>ListBox</Bold> actually holds items.
                <LineBreak/>
                Notice that <Underline>I did not subclass</Underline> the <Bold>ListBox</Bold>, or any other controls. Im using the standard WPF controls.
                <LineBreak/>
                The <Bold>Viewbox</Bold> has its <Bold>Stretch</Bold> property set to <Italic>Uniform</Italic>, but you can change that in XAML and see the different results.
                <LineBreak/>
                Also, resize the Window and see how the UI elements react to the change.
                <LineBreak/>
                You can work on <Hyperlink NavigateUri="http://denisvuyka.wordpress.com/2007/10/15/wpf-simple-adorner-usage-with-drag-and-resize-operations/" 
                                           RequestNavigate="HyperLink_RequestNavigate">Drag Adorners</Hyperlink> or use
                                <Hyperlink NavigateUri="http://kentb.blogspot.com.ar/2007/04/resizer-wpf-control.html"
                                           RequestNavigate="HyperLink_RequestNavigate">This Control</Hyperlink> to implement the Line Resizing functionality.
                <LineBreak/>
                It took me 2 hours to develop this sample, then I spent an extra hour tweaking it and making it beautiful.
            </TextBlock>
        </Expander>

        <Viewbox Stretch="Fill">
            <ListBox ItemsSource="{Binding}" x:Name="lst" Height="500" Width="500"
                     Background="Transparent">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style TargetType="Control">
                                    <Setter Property="Opacity" Value="0"/>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    
                                    <Line X1="{Binding X1}" Y1="{Binding Y1}"
                                          X2="{Binding X2}" Y2="{Binding Y2}" 
                                          StrokeThickness="{Binding Thickness}"
                                          Opacity="{Binding Opacity}"
                                          x:Name="Line">
                                        <Line.Stroke>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                                <GradientStop Color="{Binding Color1}" Offset="0"/>
                                                <GradientStop Color="{Binding Color2}" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Line.Stroke>
                                    </Line>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter Property="Effect" TargetName="Line">
                                                <Setter.Value>
                                                    <DropShadowEffect Color="CornflowerBlue" ShadowDepth="3" BlurRadius="10"/>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
        </Viewbox>
    </DockPanel>
</Window>
